1. What are the advantages and disadvantages of implementing indexing and serialization?

    a(Indexing)|| indexing is nice if you have to deal with a lot of information throughout the program, however
    it does make the start up take longer so if you are not using it much throughout the program probably just easier
    to iterate through it as needed. Longer / bigger the program the more useful indexing becomes.

    b(serialization)|| serialization is nice for when you dont need human readability, but it is a lot easier to save
    and read the files this way (as long as your own object class matches the .ser file) and the larger the object is
    the better .ser is in comparison to .txt especially since you do not need to manually convert .txt data into the
    object type.

2. What impact did these implementations have on performance?
    other than startup for the indexing it seems to be much better performance on pretty much everything, allowing for
    faster and more efficient data retrieval and storage

3. Were your implementations efficient? Why or why not?
    we believe them to be fairly efficient, the only real hang up we have is with reading the given .ser files
    since they did not quite match our data structure and file paths we needed to do some parsing and refactoring to
    each .ser file before fully assigning it to our employee class.

4. What impact would significantly changing the size or quantity of our data (more or less) have on your previous answers?
    with the use of indexing and serialization the larger the data the performance we've optimized really comes to shine,
    our program runs nearly identical with a small portion of data but with larger data retrieval our optimizations really shine.